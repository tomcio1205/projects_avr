Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                              ./main.o (__do_copy_data)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
LOAD ./hd44780.o
LOAD ./main.o
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x2ec
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026       0xc9 ./main.o
                0x0000000000000026                txt1
                0x000000000000002c                txt2
                0x0000000000000032                txt3
                0x0000000000000038                txt4
                0x000000000000003e                txt5
                0x0000000000000048                txt6
                0x0000000000000052                txt7
                0x000000000000005c                txt8
                0x0000000000000066                txt9
                0x0000000000000070                txt10
                0x000000000000007d                txt11
                0x0000000000000081                menuB3
                0x000000000000008b                menuB2
                0x0000000000000095                menuB1
                0x000000000000009f                menuA4
                0x00000000000000a9                menuA3
                0x00000000000000b3                menuA2
                0x00000000000000bd                menuA1
                0x00000000000000c7                menu3
                0x00000000000000d1                menu2
                0x00000000000000db                menu1
                0x00000000000000e5                menu
                0x00000000000000f0                . = ALIGN (0x2)
 *fill*         0x00000000000000ef        0x1 00
                0x00000000000000f0                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000000000000f0        0x0 linker stubs
 *(.trampolines*)
                0x00000000000000f0                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000000000000f0                __ctors_start = .
 *(.ctors)
                0x00000000000000f0                __ctors_end = .
                0x00000000000000f0                __dtors_start = .
 *(.dtors)
                0x00000000000000f0                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000000000000f0        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x00000000000000f0                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000000000000f0        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000fc       0x16 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                0x00000000000000fc                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000112        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x0000000000000116        0x2 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x0000000000000116                __vector_1
                0x0000000000000116                __vector_12
                0x0000000000000116                __bad_interrupt
                0x0000000000000116                __vector_6
                0x0000000000000116                __vector_3
                0x0000000000000116                __vector_11
                0x0000000000000116                __vector_13
                0x0000000000000116                __vector_17
                0x0000000000000116                __vector_7
                0x0000000000000116                __vector_5
                0x0000000000000116                __vector_4
                0x0000000000000116                __vector_9
                0x0000000000000116                __vector_2
                0x0000000000000116                __vector_15
                0x0000000000000116                __vector_8
                0x0000000000000116                __vector_14
                0x0000000000000116                __vector_10
                0x0000000000000116                __vector_16
                0x0000000000000116                __vector_18
 .text          0x0000000000000118        0x0 ./hd44780.o
 .text          0x0000000000000118        0x0 ./main.o
 .text          0x0000000000000118        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text          0x0000000000000118        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                0x0000000000000118                . = ALIGN (0x2)
 *(.text.*)
 .text.lcd_e_port_low
                0x0000000000000118        0x4 ./hd44780.o
 .text.lcd_e_port_high
                0x000000000000011c        0x4 ./hd44780.o
 .text.lcd_write
                0x0000000000000120       0xa8 ./hd44780.o
 .text.lcd_command
                0x00000000000001c8        0x6 ./hd44780.o
                0x00000000000001c8                lcd_command
 .text.lcd_goto
                0x00000000000001ce        0x6 ./hd44780.o
                0x00000000000001ce                lcd_goto
 .text.lcd_clrscr
                0x00000000000001d4        0x6 ./hd44780.o
                0x00000000000001d4                lcd_clrscr
 .text.lcd_home
                0x00000000000001da        0x6 ./hd44780.o
                0x00000000000001da                lcd_home
 .text.lcd_putc
                0x00000000000001e0        0x6 ./hd44780.o
                0x00000000000001e0                lcd_putc
 .text.lcd_puts
                0x00000000000001e6       0x16 ./hd44780.o
                0x00000000000001e6                lcd_puts
 .text.lcd_puts_P
                0x00000000000001fc       0x1a ./hd44780.o
                0x00000000000001fc                lcd_puts_P
 .text.lcd_init
                0x0000000000000216       0xaa ./hd44780.o
                0x0000000000000216                lcd_init
 .text.menufunc1
                0x00000000000002c0        0x2 ./main.o
                0x00000000000002c0                menufunc1
 .text.menufunc2
                0x00000000000002c2        0x2 ./main.o
                0x00000000000002c2                menufunc2
 .text.menufunc3
                0x00000000000002c4        0x2 ./main.o
                0x00000000000002c4                menufunc3
 .text.menufunc4
                0x00000000000002c6        0x2 ./main.o
                0x00000000000002c6                menufunc4
 .text.menufunc5
                0x00000000000002c8        0x2 ./main.o
                0x00000000000002c8                menufunc5
 .text.menufunc6
                0x00000000000002ca        0x2 ./main.o
                0x00000000000002ca                menufunc6
 .text.menufunc7
                0x00000000000002cc        0x2 ./main.o
                0x00000000000002cc                menufunc7
 .text.Menu_Back
                0x00000000000002ce        0x2 ./main.o
                0x00000000000002ce                Menu_Back
 .text.GetMenuItem
                0x00000000000002d0        0x2 ./main.o
                0x00000000000002d0                GetMenuItem
 .text.Menu_Show
                0x00000000000002d2        0xc ./main.o
                0x00000000000002d2                Menu_Show
 .text.main     0x00000000000002de        0xa ./main.o
                0x00000000000002de                main
 .text.libgcc   0x00000000000002e8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000002e8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                0x00000000000002e8                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000002e8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                0x00000000000002e8                exit
                0x00000000000002e8                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000002e8        0x4 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000002ec                _etext = .

.data           0x0000000000800060        0x8 load address 0x00000000000002ec
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060        0x0 ./hd44780.o
 .data          0x0000000000800060        0x6 ./main.o
 .data          0x0000000000800066        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800066        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 *(.data*)
 .data.LCD_ROWS
                0x0000000000800066        0x1 ./main.o
                0x0000000000800066                LCD_ROWS
 .data.LCD_COLUMNS
                0x0000000000800067        0x1 ./main.o
                0x0000000000800067                LCD_COLUMNS
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800068                . = ALIGN (0x2)
                0x0000000000800068                _edata = .
                0x0000000000800068                PROVIDE (__data_end, .)

.bss            0x0000000000800068        0x0
                0x0000000000800068                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800068        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000800068        0x0 ./hd44780.o
 .bss           0x0000000000800068        0x0 ./main.o
 .bss           0x0000000000800068        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800068        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 *(.bss*)
 *(COMMON)
                0x0000000000800068                PROVIDE (__bss_end, .)
                0x00000000000002ec                __data_load_start = LOADADDR (.data)
                0x00000000000002f4                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800068        0x0
                0x0000000000800068                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800068                PROVIDE (__noinit_end, .)
                0x0000000000800068                _end = .
                0x0000000000800068                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x6cc
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o

.stabstr        0x0000000000000000       0x54
 *(.stabstr)
 .stabstr       0x0000000000000000       0x54 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(menu_wielopoziomowe.elf elf32-avr)
LOAD linker stubs
